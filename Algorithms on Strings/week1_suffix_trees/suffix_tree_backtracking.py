"""
Problem Description
Task.
    Construct the suffix tree of a string.
Input Format.
    A string Text ending with a “$” symbol.
Constraints.
    1 ≤ |Text| ≤ 5 000; except for the last symbol, Text contains symbols A, C, G, T only.
Output Format.
    The strings labeling the edges of SuffixTree(Text) in any order.

Sample 1.
Input:
    A$
Output:
    A$
    $
Explanation:
            O
          $/ \A$
         O    O

"""

# python3
import sys
from collections import defaultdict


def create_trie(text):
    """
    Create trie from the patterns
    """
    trie = defaultdict(dict)
    counter = 0
    patterns = [text[i:] for i, _ in enumerate(text)]
    for pid, pattern in enumerate(patterns):
        current_node = 0
        for index, letter in enumerate(pattern):
            if letter in trie[current_node]:
                current_node = trie[current_node][letter]
            else:
                counter += 1
                trie[current_node][letter] = counter
                current_node = counter
    return trie


def get_suffix_edges(trie):
    """
    Use Backtracking (depth first search) to get all the edges
    """
    result = list()

    def dfs(index, text_string):
        if index not in trie and text_string:
            result.append(text_string) # If end of the tree, then append
            return
        current_branch = trie[index]
        if len(current_branch) > 1 and text_string:
            result.append(text_string) # If branching out, append till last branch and reset text string
            text_string = ""
        for letter, ind in current_branch.items():
            dfs(ind, text_string + letter)

    dfs(0, "")
    return result


def build_suffix_tree(text):
    """
    Build a suffix tree of the string text and return a list
    with all of the labels of its edges (the corresponding
    substrings of the text) in any order.
    """
    trie = create_trie(text)
    result = get_suffix_edges(trie)
    return result


if __name__ == '__main__':
    text = sys.stdin.readline().strip()
    # text = "GCTGTTACGGCACGGCGAGGCCTAGGCTCGCCAATCGCCGAGCAGGAACCCGTTCATATATCCGAAGAACTACTGTGCGGAGGGCGTATGGCATGTGGGCTGAGGTCGGACTCTTTCACCATTCCCATGATAGCGGAAACTCGTCTAGGAGGTGGTCATTACAAGATGGACTGGATCCAGCCGCTTGGAGTACACACTATATTACATCTCCGCGATTGTCCGCTGCATCTGCCCCACGGCCCAGCTCTTCGCGAAAGGGTTACGTCGCCAGGCCGATCTTTCGTCCAGGTCTGGTCAGGTGGTGTGCCAGACTTGTATACCTGTCCATGGGTCTACACTGCGTTCAATGTACTAAGCAACATGTTTTATTCATTAATAAGAAAACTCGAACAGTCTGCTGGCCGTGGGCGAGTGCGTTATGCTCCGCCAACTAGGCGCAGGCTAACCACAGACAATGAGAATAGAGACACTGGGGTAGCGAAGTTGTCTACAGTGTGTCACTATAAAAAGACGGAAGCGCCTTATGCCAACTGACGGAAACCCGTATCGAGGTGCACGCGTGTCTCGCCCACTCACGCGGGTCACCTTCTGTCTTACACCTTCGTGAGTGTCTTACCCCCCTGATGGGAGGCTAAAAACATGTAAGATGCCCGCTGGCAGGCTGGGAAGCGGATAGCTAGGAGGATATGTAAGCGTTAAACTGCCACAAAGACTTGCACAACCGGCTGGCTATAACCATGCACTCCCACCGGGCCTGTCAAGAGGTAGTGTGTGCCGACGCGGATCGCCTCAATGACTGAACAGATTGGCTAAGGTCGGCTACGTCGGGGACTCTGAGGTTTAATATGACCTATTCTCGTGTTATGTTTCCTATAGACGATTTGAGTGTAACCCTTGACGTTGGATAGGGCACCTCTGTTGGTGAATAAAAGTAATGAATCGCGGGGGTGCGCCTGTACGGATTTTAAGCCGATGCATCCCCAAAGTGTGGTAGCATTTCAATGTTAGTATTAGGCTTCACGCGTCAGGCAGTGACCTTTCGTGTAACTAAACATAATAAAGACATTTATTCGGTACATCTAGTTCGGGTGCTCACGCTACATACACGCAGTCCATCGAACGTGTCCGCAAAATAAGCAAGGGACCCCAGTTTCAGCCATTATAAGGCGCTACGAAAGGCTATTTGGACAAGAGCTGCCGTACGGCTTCGGTCTTGTCTAGTATCATGGCTCCCTGCCTCTGGGATTTTATTAAACTTCGTCTCAAGGAGGAGAAGCCAGGCCAAGCCATCCACGCAAGGTTCCATAAAGCACTGCTGGTAATGGGTATCCACCTAAGCTGATTGATTAGGGAGCCCCACAATTTCGACCTTCAGCCACGTTGCATTCCCGCCAACTATTACGAACTATATGACTGATCATCAGGGCACACCGGCAAGACGAATCTCAATCAAAAGTCAGGGTAGCGGAAAAAGATGTAAAAGCAGTGTACATCGTACACGTGAGCGATAGGAAGCCAACCATCAAACTAATTTGCGCCCCCTGGTGTACGCCGCTACTTTTGAAAAGATTGGCGTCGATCCGTGTCATGAGTGCTATTCTGCACTATGTGGAATCAAATGATTGTTCACCGGGATAGCAGCGGGTCAGGCAGGCAGGAGATCCTCGGCATGCCAAAAGTTCTCTCAAACTCCTGAGAACACTCTTGTTCCTGTCTTGGCGCGCACATACCTCAGCCCGACAACTTGCATAAACGTTTTTTGTTTGATGCTCCAAAAGCATGTTGTTCGCCCATTTCGTGCATTCTTCGTGCTACATTCCCCGGTTAGGGAACGAGGATTCAGTCGCTCGAAACTACCTACCAATGGTCTAGGACTCTGGTGCTCGTCGTTGGATCTAGTATCGCAGACTGAGTAACCTATCTGTCGATGATATGACGCGTTGCCAAAGAAGAGATGTCCTTAAGGCGGGTCATGACCAATTCAAAACATATCATGACCTGGAGTCAGGTCCGGGTAAGAGCGTAGAAGCGATCCCCGGTCCAGTCAGATCACTATTTAACGGCAAAGTCTATACCCCAAGCCCGAGGTTCGGTCGACAGCCTGCGAACCGTGTTTACCGCTCCAGGAGCAATGAGATAAATGACTTGTCTCCCTGAACGGTTCTCGTCCCCACTCAATTTTATTACTATTACGCGCAGTCGCGACTTTTGATCAGGGTAGATTCGCGAGGTATACTGCCTGAAGCTTCCAACGAAAGCTCTAATTCGTAGCCTATCCCAAGCTAAATATGACATGAATTGCACTCGCGAGAAATTCTGCCACCAATGCAAGGACGCGCGTATTTCGGCCGCGCGCCAACGCTGTATGATCCGACTCCTACATA ... CTGAACAACCTCGACTCAAACTAGTGCTCCCCGTTGGCAGCGTCCACTGAATCCATACTCTAGCGTCGACGTAGGGTGGTTGCTGGAGTGCCCAAGATCTAGGAGACGGTGCCCGCGCAATGAAGCGACACCTACGTATAATTAAGTGTCTATCAATTAAACTATTGGGTGGCCGGCATGGTACGCTATCTACGACGACGGGAGACCAGCAGGGGGTTACCCCCTATCGCAAATTACCGTATTGGCAGAGTGAGACAGCACCTCGGCTTTCGCGCTGCTCGCAACCACCGGGGAGGGTTTGTCGGGACCGTCCGGACTCTCAAAAGTCCTCCCTAACCGCCCAGGTGGAAGGCATATAAGGGCGCCCCAAAGCTGAGGTAATGCGGCAGTACACTGCCGCACCTTCAAGAGGATGACAATTAGGGCTGTCGTCGCTAATGGGAAGTGTAAATTGTAAGAGAGACATAACATAATCGCATTACTTCGACACACGGATGATGAAATCTCAGTACGATCCGCGGCACATGGTGAAACGTCTTAGCCGAATATTAGCCTAACTAGTTTTTCCGGTCGACGGCGACGCCCACAACAGTCACAGTGCCTTGTCAAGTTACAAGGGATCCCATTCGAGAACCGTAGACATGCCGAAACTCGCAATGTAACTTCGTGGAATTCGGGAGCTCTAGCACCACATGTCCGAAAAATCCATAGGCGTAGTAGCATTACCCAACCTGAGACTTCCAGCTGTGAGACGTGTGATGCTGTTCTTCAACCCTATGACTCGTTTTTACAGATACGCTCATTCGAGTTCGGGGCGGCAATTCACCATTGTGCGATGAGACAGACACGGTTTGGAGGCTTTGATGTGCCTCACCGCCCCTTCAAGTAGCAGCATAAGTGGGGGAGCACGGAAAACTCACGAGCGTGGCTCGGCCCTTATTGGGAACAGTAACAAGAAGCTTAAACAGATCCTGCACAGAATAGGTAAGGCTCTAACTCATTTCGCGCAGTCCGTGATACCGCTACGAACCCCAGGTTGATCCGGACCGGAGATCATTCACATTAACCACCGCTCGCAGAGTATCTGGAGTCGGCTTACCGGCCTACCTATTCTGCGGCGACATGGCTGCTCTGTCATTCCTACAACAGCAGGGGGCAGTGTTGTGTCAACGGATGGCCTTAAACGAAGTCTTCCATTATGCTAGACCCCGTGCGGGTTGTTTCACTGACCGTTGGCTCCCGCCCGCAAGAGACTGAGCTCCTGGTCTTCGCCGCACGAGTAGTTGGCACACATGCGGACTCACTTGCTAGTGCCCCTGCACGTTAGACTGCATACATATCATCTCAATGAACAGCACGATTCCGTCCCCGTTTCTCTTTCTTAGTTGTTGACTACGAATTAGTATAACAATTCCTAGCGGTAGTCGGCCGTGCCGGTGCCTGCGCCCGTTCCAAGAGCGGGCGCGGACTTTGGGCTTGGGCGTCCAGTGATATAAGGGGGGAAGGGAAACGCCTAGCGGATGTCCATCCAATGCCGAGATGGAATTAACTTTGTACGTGTGTCCCGTTGCGTTCCGAGTTGCTCGGCTTCGGACTGGAGCAGGGAACAATACTTGCACCCGGGTAGTTGGTTCACTATGGTCATAGCAGGAATGATTTAAGGGCCCTAGAGTGGCTCCGCAACAGAATATTTGCCTCGTCGCCGTTTCGGACGTGACCTCCGGGCTGGCGGTATGAAAAAGTAGTCACACTTAGCTTCTGCTGTTGAGCCACTGAGGTAGATGCTATTTTACACAGCCGTAGGAAGACACAGGAACACCCGGCGACTCTAAAAAAAGCGTAGGTGCACCTGTGGACTGGCTGTTAATCCTATCGGGATAGCTATTTGGGCAGCGCCTTAGATTCATTCAGATGGACGACTTGGTTCTCATGGCTACGCTGTTGCCGGGTTGGGAAGTTTGCAAGCCTTCCAGGAGAATCTGTATATGTTGTGCACTGGCGACAGCACTAAGGATTTGAACTCGAAAGCTTGTGTCCCTAAAAATTGCATTTCTGGTCTTTCTTAGCCATCTCCGAGTTAAAATCCTCACGGTTGAACGCACAGGCACCCCCATGGGGCCCACGACAGTATTAGGCTTCGAGAGTTTAACAGATGACGTGACCCACTAATTAGGTTAGCTTGGATCATTTGAGCTGAGCTTCCGTTGGCCGCCTAGGTCAACTGGTTGACCATTTAGTATGCAGTAGCCATCAATAGAGGCTTTAATCTAACCCTTACAGCGCGCATAACGGTACATGAGTGGTATTCTATGAACGAGCTATCAATGTAGGATCGTTATGGAGGCGG$"
    result = build_suffix_tree(text)
    print("\n".join(result))
